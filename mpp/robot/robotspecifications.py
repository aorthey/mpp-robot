from math import pi,cos,sin
import numpy as np

SAMPLER_H1_STEP=0.03
SAMPLER_H2_STEP=0.03
SAMPLER_H3_STEP=0.03

############################################################
## DEBUG
############################################################
DEBUG_HTOQ = 0
DEBUG_QTOX = 0
DEBUG_HTOX = 0
DEBUG_CLUSTERH3_PLOT = 1
K_HOMOTOPY_CLASS=1

FOOTSTEP_MAX_STEP = 0.10
FOOTSTEP_INITIAL_DISTANCE = 0.2
FOOTSTEP_MIN_DISTANCE = 0.18
FOOTSTEP_MAX_DISTANCE = 0.40

FINAL_HOMOTOPY = 0
FINAL_MINIMA = 27

############################################################
## PATH PLANNING
############################################################

WRITE_TRAJECTORIES_TO_FILE=True

SOLVER_MAX_ITERATIONS = 2500
SOLVER_EPS = 1e-3
SOLVER_VERBOSE = False

MINIMUM_SAMPLES_PER_WALKABLE_SURFACE = 15
EPSILON_FUNCTIONAL_SPACE = 0.02
K_POLYNOMIAL_BASIS_FUNCTIONS = 2000
M_TRAJECTORY_POINTS = 1000

MIN_DISTANCE_POINTS_TO_BOUNDARY = 0.04
## min stepping distance 20cm
MIN_DISTANCE_WALKABLE_SURFACES = 0.2
PATH_DIST_WAYPOINTS_MAX = MIN_DISTANCE_WALKABLE_SURFACES

PATH_RADIUS_START_REGION = 0.01
PATH_RADIUS_GOAL_REGION = 0.01

############################################################
## COLORS
############################################################
COLOR_SWEPTVOLUME_LEFT = (0.4,0.0,0.0,1.0)
COLOR_SWEPTVOLUME_RIGHT = COLOR_SWEPTVOLUME_LEFT
SWEPTVOLUME_LINE_SIZE = 1
SWEPTVOLUME_MARKER_SIZE = 4
ZORDER_WALKABLE_SURFACE = -1
ZORDER_CONNECTOR = 1000
ZORDER_SWEPTVOLUME = 1000
ZORDER_DEFAULT = -1

COLOR_SCENE = (0.6,0.6,0.6,1.0)
COLOR_CROSS_SECTION = (0.6,0.2,0.2,0.3)
COLOR_START_POINT = (0.2,0.2,0.2,1)
COLOR_WALKABLE_SURFACE = (0.8,0.8,0.8,0.5)
COLOR_CONNECTOR = (0.8,0.8,0.8,0.6)

Z_AXIS = np.array((0,0,1))
X_AXIS = np.array((1,0,0))
############################################################
## ROBOT CONSTANTS
############################################################
ROBOT_SPHERE_RADIUS = 0.3 #the max sphere embedded in the irreducible volume
ROBOT_MAX_SLOPE = 5 # in degrees
ROBOT_FOOT_RADIUS = 0.15 # in m
ROBOT_FOOT_HEIGHT = 0.09 # in m
ROBOT_VOLUME_MIN_HEIGHT = 1.2 #in m
ROBOT_VOLUME_MAX_HEIGHT = 1.539 #in m
ROBOT_HEAD_SIZE = 0.21 #in m

ROBOT_DIST_FOOT_SOLE = 0.04
ROBOT_DIST_KNEE_FOOT = 0.31
ROBOT_DIST_HIP_KNEE = 0.31
ROBOT_DIST_WAIST_HIP = 0.25
ROBOT_DIST_NECK_WAIST = 0.38
ROBOT_DIST_HEAD_NECK = 0.14

ROBOT_APERTURE_KNEE_FOOT= pi/3
ROBOT_APERTURE_HIP_FOOT= pi/100
ROBOT_APERTURE_HIP_KNEE = pi/2.2
ROBOT_APERTURE_WAIST_HIP = pi/16
ROBOT_APERTURE_NECK_WAIST = pi/16
ROBOT_APERTURE_HEAD_NECK = pi/16

ROBOT_THICKNESS_FOOT_SOLE = 0.234
ROBOT_THICKNESS_KNEE_FOOT = 0.10
ROBOT_THICKNESS_HIP_KNEE = 0.10
ROBOT_THICKNESS_WAIST_HIP = 0.28
ROBOT_THICKNESS_NECK_WAIST = 0.34
ROBOT_THICKNESS_HEAD_NECK = 0.21

ROBOT_DIST_KNEE_FOOT_MIN = ROBOT_DIST_KNEE_FOOT*(cos(ROBOT_APERTURE_KNEE_FOOT))
ROBOT_DIST_HIP_FOOT_MIN = ROBOT_DIST_KNEE_FOOT_MIN+ROBOT_DIST_HIP_KNEE*(cos(ROBOT_APERTURE_HIP_KNEE))
ROBOT_DIST_WAIST_FOOT_MIN = ROBOT_DIST_HIP_FOOT_MIN+ROBOT_DIST_WAIST_HIP*(cos(ROBOT_APERTURE_WAIST_HIP))
ROBOT_DIST_NECK_FOOT_MIN = ROBOT_DIST_WAIST_FOOT_MIN+ROBOT_DIST_NECK_WAIST*(cos(ROBOT_APERTURE_NECK_WAIST))
ROBOT_DIST_HEAD_FOOT_MIN = ROBOT_DIST_NECK_FOOT_MIN+ROBOT_DIST_HEAD_NECK*(cos(ROBOT_APERTURE_HEAD_NECK))

ROBOT_DIST_KNEE_FOOT_MAX = ROBOT_DIST_KNEE_FOOT
ROBOT_DIST_HIP_FOOT_MAX = ROBOT_DIST_KNEE_FOOT_MAX+ROBOT_DIST_HIP_KNEE
ROBOT_DIST_WAIST_FOOT_MAX=ROBOT_DIST_HIP_FOOT_MAX+ROBOT_DIST_WAIST_HIP
ROBOT_DIST_NECK_FOOT_MAX =ROBOT_DIST_WAIST_FOOT_MAX+ROBOT_DIST_NECK_WAIST
ROBOT_DIST_HEAD_FOOT_MAX =ROBOT_DIST_NECK_FOOT_MAX+ROBOT_DIST_HEAD_NECK

ROBOT_DIST_HEAD_FOOT_MAX = 1.539
XSPACE_DIMENSION = 40
VSTACK_DELTA = ROBOT_VOLUME_MAX_HEIGHT/32
ROBOT_MAX_UPPER_BODY_DISTANCE_FROM_FOOT = sin(ROBOT_APERTURE_KNEE_FOOT)*ROBOT_DIST_KNEE_FOOT

## FROM REAL HARDWARE LIMITATIONS
THETA_LIMITS_LOWER = np.array((-1.31,-0.03,-2.18,-0.09,-0.52))
THETA_LIMITS_UPPER = np.array((0.73,2.62,0.73,1.05,0.79))

## FROM INSPECTION OF COLLISION LIMITS
THETA_SELFCOLLISION_LOWER = np.array((-1.2,0.0,-1.5,0.0,-0.2))
THETA_SELFCOLLISION_UPPER = np.array((0.0,2.3,0.15,0.9,0.1))

#QLIMIT_HOMOTOPY01_LOWER = np.array((-1.2,0.0,-0.1,-0.8,-0.2))
#QLIMIT_HOMOTOPY01_UPPER = np.array(( 0.0,1.3, 0.1, 0.0, 0.2))

QLIMIT_HOMOTOPY01_LOWER = np.array(( 0.0,-1.3,-0.1, 0.0,-0.2))
QLIMIT_HOMOTOPY01_UPPER = np.array(( 1.2, 0.0, 0.1, 0.8, 0.2))

QLIMIT_HOMOTOPY23_LOWER = -QLIMIT_HOMOTOPY01_UPPER
QLIMIT_HOMOTOPY23_UPPER = -QLIMIT_HOMOTOPY01_LOWER

SV_HEIGHTS=[]
for i in range(0,XSPACE_DIMENSION):
        SV_HEIGHTS.append(i*VSTACK_DELTA)
